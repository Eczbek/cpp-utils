#pragma once

#include <fcntl.h>
#include <string>
#include <string_view>
#include <termios.h>
#include <thread>
#include <unistd.h>


namespace util {
	namespace io {
		class Raw {
		private:
			termios cooked;

		public:
			Raw(const bool echo = false) noexcept;

			~Raw();
		};

		class NonBlock {
		private:
			const int blocking = fcntl(STDIN_FILENO, F_GETFL);

		public:
			NonBlock() noexcept;

			~NonBlock();
		};

		void ignore(const char until = 0) noexcept;

		void ignore(std::streamsize characters) noexcept;

		char waitChar(const bool echo = false) noexcept;

		char readChar(const char defaultChar = 0) noexcept;

		template <typename Duration>
		char timeoutChar(const Duration timeout, const char defaultChar = 0, const bool echo = false, const bool readAll = true) noexcept {
			util::io::Raw rawLock(echo);
			util::io::NonBlock nonblockLock;
			std::this_thread::sleep_for(timeout);
			char input = defaultChar;
			while (read(STDIN_FILENO, &input, 1) == 1 && readAll);
			return input;
		}

		std::string readString() noexcept;

		struct Position {
			int row;
			int column;
		};

		util::io::Position getWindowSize() noexcept;

		namespace cursor {
			enum: char {
				up = 'A',
				down,
				right,
				left
			};

			util::io::Position getPos() noexcept;

			void setPos(const util::io::Position position) noexcept;

			void move(const char direction, const int count = 1) noexcept;
		}

		namespace style {
			constexpr std::string_view none = "\033[0m";

			constexpr std::string_view erase_line = "\033[2K\r";
			constexpr std::string_view erase_all = "\033[2J\033[H";

			namespace ef {
				constexpr std::string_view bold = "\033[1m";
				constexpr std::string_view dim = "\033[2m";
				constexpr std::string_view italic = "\033[3m";
				constexpr std::string_view underline = "\033[4m";
				constexpr std::string_view blink = "\033[5m";
				constexpr std::string_view reverse = "\033[7m";
				constexpr std::string_view hide = "\033[8m";
				constexpr std::string_view strikethrough = "\033[9m";
				constexpr std::string_view underline_double = "\033[21m";

				constexpr std::string_view cursor_hide = "\033[?25l";
				constexpr std::string_view cursor_show = "\033[?25h";
			}

			namespace fg {
				constexpr std::string_view black = "\033[30m";
				constexpr std::string_view red = "\033[31m";
				constexpr std::string_view green = "\033[32m";
				constexpr std::string_view yellow = "\033[33m";
				constexpr std::string_view blue = "\033[34m";
				constexpr std::string_view magenta = "\033[35m";
				constexpr std::string_view cyan = "\033[36m";
				constexpr std::string_view white = "\033[37m";

				constexpr std::string_view black_bright = "\033[90m";
				constexpr std::string_view red_bright = "\033[91m";
				constexpr std::string_view green_bright = "\033[92m";
				constexpr std::string_view yellow_bright = "\033[93m";
				constexpr std::string_view blue_bright = "\033[94m";
				constexpr std::string_view magenta_bright = "\033[95m";
				constexpr std::string_view cyan_bright = "\033[96m";
				constexpr std::string_view white_bright = "\033[97m";
			}

			namespace bg {
				constexpr std::string_view black = "\033[40m";
				constexpr std::string_view red = "\033[41m";
				constexpr std::string_view green = "\033[42m";
				constexpr std::string_view yellow = "\033[43m";
				constexpr std::string_view blue = "\033[44m";
				constexpr std::string_view magenta = "\033[45m";
				constexpr std::string_view cyan = "\033[46m";
				constexpr std::string_view white = "\033[47m";

				constexpr std::string_view black_bright = "\033[100m";
				constexpr std::string_view red_bright = "\033[101m";
				constexpr std::string_view green_bright = "\033[102m";
				constexpr std::string_view yellow_bright = "\033[103m";
				constexpr std::string_view blue_bright = "\033[104m";
				constexpr std::string_view magenta_bright = "\033[105m";
				constexpr std::string_view cyan_bright = "\033[106m";
				constexpr std::string_view white_bright = "\033[107m";
			}
		}
	}
}
