#pragma once

#include <fcntl.h>
#include <string>
#include <termios.h>
#include <thread>
#include <unistd.h>


namespace util {
	namespace io {
		class Raw {
		private:
			termios cooked;

		public:
			Raw(const bool echo = false) noexcept;

			~Raw();
		};

		class NonBlock {
		private:
			const int blocking = fcntl(STDIN_FILENO, F_GETFL);

		public:
			NonBlock() noexcept;

			~NonBlock();
		};

		void ignore(const char until = 0) noexcept;

		void ignore(std::streamsize characters) noexcept;

		char waitChar(const bool echo = false) noexcept;

		char readChar(const char defaultChar = 0) noexcept;

		template <typename Duration>
		char timeoutChar(const Duration timeout, const char defaultChar = 0, const bool echo = false, const bool readAll = true) noexcept {
			util::io::Raw rawLock(echo);
			util::io::NonBlock nonblockLock;
			std::this_thread::sleep_for(timeout);
			char input = defaultChar;
			while (read(STDIN_FILENO, &input, 1) == 1 && readAll);
			return input;
		}

		std::string readString() noexcept;

		struct Position {
			int row;
			int column;
		};

		util::io::Position getWindowSize() noexcept;

		namespace cursor {
			enum: char {
				up = 'A',
				down,
				right,
				left
			};

			util::io::Position getPos() noexcept;

			void setPos(const util::io::Position position) noexcept;

			void move(const char direction, const int count = 1) noexcept;
		}

		namespace style {
			constexpr std::string none = "\27[0m";

			constexpr std::string erase_line = "\27[2K\r";
			constexpr std::string erase_all = "\27[2J\27[H";

			namespace ef {
				constexpr std::string bold = "\27[1m";
				constexpr std::string dim = "\27[2m";
				constexpr std::string italic = "\27[3m";
				constexpr std::string underline = "\27[4m";
				constexpr std::string blink = "\27[5m";
				constexpr std::string reverse = "\27[7m";
				constexpr std::string hide = "\27[8m";
				constexpr std::string strikethrough = "\27[9m";
				constexpr std::string underline_double = "\27[21m";

				constexpr std::string cursor_hide = "\27[?25l";
				constexpr std::string cursor_show = "\27[?25h";
			}

			namespace fg {
				constexpr std::string black = "\27[30m";
				constexpr std::string red = "\27[31m";
				constexpr std::string green = "\27[32m";
				constexpr std::string yellow = "\27[33m";
				constexpr std::string blue = "\27[34m";
				constexpr std::string magenta = "\27[35m";
				constexpr std::string cyan = "\27[36m";
				constexpr std::string white = "\27[37m";

				constexpr std::string black_bright = "\27[90m";
				constexpr std::string red_bright = "\27[91m";
				constexpr std::string green_bright = "\27[92m";
				constexpr std::string yellow_bright = "\27[93m";
				constexpr std::string blue_bright = "\27[94m";
				constexpr std::string magenta_bright = "\27[95m";
				constexpr std::string cyan_bright = "\27[96m";
				constexpr std::string white_bright = "\27[97m";
			}

			namespace bg {
				constexpr std::string black = "\27[40m";
				constexpr std::string red = "\27[41m";
				constexpr std::string green = "\27[42m";
				constexpr std::string yellow = "\27[43m";
				constexpr std::string blue = "\27[44m";
				constexpr std::string magenta = "\27[45m";
				constexpr std::string cyan = "\27[46m";
				constexpr std::string white = "\27[47m";

				constexpr std::string black_bright = "\27[100m";
				constexpr std::string red_bright = "\27[101m";
				constexpr std::string green_bright = "\27[102m";
				constexpr std::string yellow_bright = "\27[103m";
				constexpr std::string blue_bright = "\27[104m";
				constexpr std::string magenta_bright = "\27[105m";
				constexpr std::string cyan_bright = "\27[106m";
				constexpr std::string white_bright = "\27[107m";
			}
		}
	}
}
